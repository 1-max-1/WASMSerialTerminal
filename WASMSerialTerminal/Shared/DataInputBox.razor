@* This responsive layout component allows the user to input text or indivdual bytes. Sending data to the serial port is not handled.
   There is some CSS here in the associated razor.CSS file. The extra css handles some autosizing of elements when at certain screen sizes. *@

@using System.Text.RegularExpressions
@using System.Text

<div class="row my-4 gy-3">
	<div class="col-lg-6 d-flex">
		<div class="flex-grow-1 d-flex flex-column">
			<label for="send-bytes-textbox" class="form-label fw-lighter mb-0">Send bytes</label>
			@* Cannot use the radzen textbox here because they do not support @bind directives. The bind directives allow us to filter the characters that can be input. *@
			<input id="send-bytes-textbox" type="text" @bind:event="oninput" @bind:get="currentBytesString" @bind:set="OnBytesInput" class="rz-textbox" placeholder="comma separated, 0-255" size="1" />
			@if (bytesTextboxHasError) {
				<p class="text-danger text-nowrap">@bytesTextboxErrorMessage</p>
			}
		</div>
		<RadzenButton Text="Send" ButtonStyle="@ButtonStyle.Info" Click="@SendBytes" Disabled="@Disabled" class="align-self-start ms-2 me-lg-5" style="margin-top: 24px;" />
	</div>
	<div class="col-lg-6 d-flex">
		<div class="flex-grow-1 d-flex flex-column">
			<label for="send-text-textbox" class="form-label mb-0">Send text</label>
			<RadzenTextBox id="send-text-textbox" @bind-Value="@currentTextString" size="1" />
		</div>
		<div class="mx-2 d-flex flex-column">
			<label for="lineEndingSelector" class="form-label mb-0 text-nowrap">Line ending</label>
			<RadzenDropDown Data="@(new string[] { "None", "\\r", "\\n", "\\r\\n" })" @bind-Value="@currentLineEnding" id="lineEndingSelector" Style="width: 100px;" />
		</div>
		<div class="d-flex flex-column">
			@* Empty spacing to align the button with the text box and drop down fields. *@
			<p class="form-label mb-0">&nbsp;</p>
			<RadzenButton Text="Send" ButtonStyle="@ButtonStyle.Info" Click="@SendText" Disabled="@Disabled" />
		</div>
	</div>
</div>

@code {
	private string currentBytesString = "";
	private string currentTextString = "";
	private string currentLineEnding = "None";

	// true if the user entered an incorrect byte, then this will show the error message label
	private bool bytesTextboxHasError = false;
	private string bytesTextboxErrorMessage = "";

	// Block anything that isn't commas or digits
	private void OnBytesInput(string? value) {
		if (Regex.IsMatch(value!, "^[0-9,]*$")) {
			currentBytesString = value!;
		}
	}

	/// <summary> Event raised when the user clicks either of the send buttons. </summary>
	[Parameter]
	public EventCallback<byte[]> OnDataToBeSent { get; set; }
	[Parameter]
	public bool Disabled { get; set; }
	[Parameter]
	public Encoding TextEncoding { get; set; } = Encoding.UTF8;

	private async Task SendBytes() {
		// The input box will only allow digits and commas, but there may be empty items
		currentBytesString = Regex.Replace(currentBytesString, ",,+", ",");
		currentBytesString = Regex.Replace(currentBytesString, "(^,)|(,$)", ""); // And remove trailing commas

		List<byte> bytes = new();
		foreach (string number in currentBytesString.Split(',')) {
			if (!byte.TryParse(number, out byte b)) {
				bytesTextboxHasError = true;
				bytesTextboxErrorMessage = $"Invalid byte value '{number}'!";
				return;
			}
			bytes.Add(b);
		}

		bytesTextboxHasError = false;
		await OnDataToBeSent.InvokeAsync(bytes.ToArray());
	}

	private async Task SendText() {
		string lineEnding = currentLineEnding switch {
			"\\r" => "\r",
			"\\n" => "\n",
			"\\r\\n" => "\r\n",
			_ => ""
		};
		byte[] bytes = TextEncoding.GetBytes(currentTextString + lineEnding);
		await OnDataToBeSent.InvokeAsync(bytes);
	}
}