@*
This component contains a readonly text box and 2 checkboxes below it for controlling x and y autoscrolling.
The text box will fill all available width, and will fill all available height minus the height of the checkboxes.
Now also has a button for clearing the received data, and an event is also raised when this button is clicked.
*@

@inject IJSRuntime jsRuntime

<div class="d-flex flex-column" style="@Style">
	<RadzenTextArea ReadOnly="true" Value="@terminalText" Style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" id="serial-text-output" class="w-100 h-100" aria-label="Serial data output" />

	<div class="row">
		<div class="col-12 col-sm-auto">
			<RadzenButton Text="Clear" ButtonStyle="@ButtonStyle.Secondary" Size="@ButtonSize.ExtraSmall" Icon="highlight_off" class="align-middle" Click="@OnClearButtonClicked" />
		</div>
		<div class="col-auto">
			<RadzenCheckBox @bind-Value=@autoScrollDown Name="AutoScrollDownCheckbox" />
			<RadzenLabel Text="Auto scroll down" Component="AutoScrollDownCheckbox" class="align-middle" />
		</div>
		<div class="col-auto">
			<RadzenCheckBox @bind-Value=@autoScrollRight Name="AutoScrollRightCheckbox" />
			<RadzenLabel Text="Auto scroll right" Component="AutoScrollRightCheckbox" class="align-middle" />
		</div>
	</div>
</div>

@code {
	private string terminalText = "";
	private bool autoScrollDown = true;
	private bool autoScrollRight = true;

	/// <summary>
	/// Additional HTML styles to put on the root div of this <see cref="AutoScrollTextBox"/>.
	/// </summary>
	[Parameter]
	public string Style { get; set; } = "";

	/// <summary> Called when the user clicks the button that clears the stored data. </summary>
	[Parameter]
	public EventCallback OnClearDataButtonClicked { get; set; }

	/// <summary>
	/// Maximum number of characters to display. If this limit is reached,
	/// characters will be removed from the start of the string to make room for new characters.
	/// </summary>
	[Parameter]
	public int MaxChars { get; set; } = 300000;

	/// <summary>
	/// Clears the internal text variable by setting it to an empty string. <br/>
	/// The changes will not be reflected until the component is re-rendered.
	/// </summary>
	public void ClearText() => terminalText = "";

	/// <summary>
	/// Sets the text of the textbox then redraws the component.
	/// Also updates the scroll bars, if autoscroll is enabled.
	/// </summary>
	public void AppendTextAndRedraw(string text) {
		terminalText += text;

		int overflow = terminalText.Length - MaxChars;
		if (overflow > 0) {
			terminalText = terminalText.Remove(0, overflow);
		}

		// TODO: the more lines that are in the textbox, increase delay between refreshes. Maybe a linear relationship?

		//StateHasChanged();
		/*if (autoScrollDown)
			jsRuntime.InvokeVoidAsync("eval", "document.getElementById('serial-text-output').scrollTop = document.getElementById('serial-text-output').scrollHeight");
		if (autoScrollRight)
			jsRuntime.InvokeVoidAsync("eval", "document.getElementById('serial-text-output').scrollLeft = document.getElementById('serial-text-output').scrollWidth");*/
	}

	private async Task OnClearButtonClicked() {
		terminalText = "";
		await OnClearDataButtonClicked.InvokeAsync();
	}
}